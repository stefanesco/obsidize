name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Java and Build Tool Versions
  JAVA_VERSION: ${{ vars.JAVA_VERSION || '21' }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION || 'temurin' }}
  BABASHKA_VERSION: ${{ vars.BABASHKA_VERSION || 'latest' }}
  CLJ_KONDO_VERSION: ${{ vars.CLJ_KONDO_VERSION || 'latest' }}

  # Clojure CLI Configuration
  CLOJURE_CLI_VERSION: ${{ vars.CLOJURE_CLI_VERSION || '1.12.1.1550' }}
  CLOJURE_INSTALL_SHA256: ${{ vars.CLOJURE_INSTALL_SHA256 || 'aea202cd0573d79fd8b7db1b608762645a8f93006a86bc817ec130bed1d9707d' }}
  CLOJURE_DOWNLOAD_URL: ${{ vars.CLOJURE_DOWNLOAD_URL || 'https://download.clojure.org/install' }}

  # Security Tool Configuration
  TRIVY_GPG_KEY_ID: ${{ vars.TRIVY_GPG_KEY_ID || 'B5690EEEBB952194' }}
  TRIVY_PUBLIC_KEY_URL: ${{ vars.TRIVY_PUBLIC_KEY_URL || 'https://aquasecurity.github.io/trivy-repo/deb/public.key' }}

  # Windows Package Manager Configuration
  CHOCOLATEY_CLOJURE_VERSION: ${{ vars.CHOCOLATEY_CLOJURE_VERSION || '1.12.1.1550' }}

jobs:
  build:
    name: Build & Test (${{ matrix.runs_on }})
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        # Keep labels here; use runner.os for OS-specific conditionals
        runs_on: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      # Cache Clojure deps and tool caches
      - name: Cache Clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
            ~/.cache/clojure
            ~/.cache/babashka
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      # Weekly key for Trivy cache (Linux only)
      - name: Get weekly cache key
        id: weekly-key
        if: runner.os == 'Linux'
        shell: bash
        run: echo "key=$(date -u +'%Y-W%V')" >> "$GITHUB_OUTPUT"

      - name: Cache Trivy DB
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ steps.weekly-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      # Babashka + clj-kondo on all OS
      - name: Setup Clojure tools (bb, clj-kondo)
        uses: DeLaGuardo/setup-clojure@v13
        with:
          bb: ${{ env.BABASHKA_VERSION }}
          clj-kondo: ${{ env.CLJ_KONDO_VERSION }}

      # Clojure CLI per-OS
      - name: Install Clojure CLI (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Downloading Clojure installer with security validation..."
          curl -fsSL "${{ env.CLOJURE_DOWNLOAD_URL }}/linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh" -o clojure.sh

          # Security: Validate downloaded script checksum in a fail-safe way
          if ! echo "${{ env.CLOJURE_INSTALL_SHA256 }}  clojure.sh" | sha256sum -c --status; then
            echo "‚ùå Clojure installer checksum validation failed"
            exit 1
          fi
          echo "‚úÖ Clojure installer checksum validated"

          chmod +x clojure.sh
          sudo ./clojure.sh

      - name: Install Clojure CLI (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          brew install clojure/tools/clojure

      - name: Install Clojure CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Output "üîí Installing Clojure CLI via Chocolatey with version validation..."

          choco install clojure --version $env:CHOCOLATEY_CLOJURE_VERSION -y --no-progress

          # Verify exact installed version via Chocolatey
          $pkg = choco list --local-only --exact clojure --limit-output
          if (-not $pkg) {
            throw "‚ùå Clojure package not found after installation."
          }
          $installedVersion = ($pkg -split '\|')[1]
          if ($installedVersion -ne $env:CHOCOLATEY_CLOJURE_VERSION) {
            throw "‚ùå Clojure version mismatch. Expected: $env:CHOCOLATEY_CLOJURE_VERSION, Got: $installedVersion"
          }
          Write-Output "‚úÖ Clojure CLI $installedVersion installed and validated"

      # Trivy only on Linux
      - name: Install Trivy (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Installing Trivy with GPG key validation..."
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release

          # Security: Download and validate GPG key and Key ID
          wget -qO trivy.key "${{ env.TRIVY_PUBLIC_KEY_URL }}"
          if ! file trivy.key | grep -q "PGP public key"; then
            echo "‚ùå Downloaded file is not a valid PGP public key"
            exit 1
          fi

          KEYINFO=$(gpg --show-keys --keyid-format LONG trivy.key)
          echo "$KEYINFO"
          if ! echo "$KEYINFO" | grep -q "${{ env.TRIVY_GPG_KEY_ID }}"; then
            echo "‚ùå Trivy GPG key ID mismatch. Expected ${{ env.TRIVY_GPG_KEY_ID }}"
            exit 1
          fi
          echo "‚úÖ Trivy GPG public key validated (Key ID: ${{ env.TRIVY_GPG_KEY_ID }})"

          # Import validated key
          sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg < trivy.key
          rm trivy.key

          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" \
            | sudo tee /etc/apt/sources.list.d/trivy.list >/dev/null
          sudo apt-get update && sudo apt-get install -y trivy

      # Linux: run full pipeline (includes Trivy/audit per bb task)
      - name: Run CI pipeline (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: bb ci

      # macOS: lint + tests
      - name: Lint (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: bb lint

      - name: Test (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: bb test

      # Windows: lint + tests using pwsh
      - name: Lint (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: bb lint

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: bb test
