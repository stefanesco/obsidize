name: CI

on:
  push:
    branches: [main]
  pull_request:

permissions:
  contents: read

concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # Java and Build Tool Versions
  JAVA_VERSION: ${{ vars.JAVA_VERSION || '21' }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION || 'temurin' }}
  BABASHKA_VERSION: ${{ vars.BABASHKA_VERSION || 'latest' }}
  CLJ_KONDO_VERSION: ${{ vars.CLJ_KONDO_VERSION || 'latest' }}

  # Clojure CLI Configuration
  CLOJURE_CLI_VERSION: ${{ vars.CLOJURE_CLI_VERSION || '1.12.1.1550' }}
  CLOJURE_INSTALL_SHA256: ${{ vars.CLOJURE_INSTALL_SHA256 || 'aea202cd0573d79fd8b7db1b608762645a8f93006a86bc817ec130bed1d9707d' }}
  CLOJURE_DOWNLOAD_URL: ${{ vars.CLOJURE_DOWNLOAD_URL || 'https://download.clojure.org/install' }}

  # Security Tool Configuration
  TRIVY_GPG_KEY_ID: ${{ vars.TRIVY_GPG_KEY_ID || 'E9D0A3616276FA6C' }}
  TRIVY_PUBLIC_KEY_URL: ${{ vars.TRIVY_PUBLIC_KEY_URL || 'https://aquasecurity.github.io/trivy-repo/deb/public.key' }}

  # Windows Package Manager Configuration
  CHOCOLATEY_CLOJURE_VERSION: ${{ vars.CHOCOLATEY_CLOJURE_VERSION || '1.12.1.1550' }}

jobs:
  build:
    name: Build & Test (${{ matrix.runs_on }})
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        # Keep labels here; use runner.os for OS-specific conditionals
        runs_on: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v5

      # Cache Clojure deps and tool caches
      - name: Cache Clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
            ~/.cache/clojure
            ~/.cache/babashka
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      # Weekly key for Trivy cache (Linux only)
      - name: Get weekly cache key
        id: weekly-key
        if: runner.os == 'Linux'
        shell: bash
        run: echo "key=$(date -u +'%Y-W%V')" >> "$GITHUB_OUTPUT"

      - name: Cache Trivy DB
        if: runner.os == 'Linux'
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ steps.weekly-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Set up Java ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v5
        with:
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          java-version: ${{ env.JAVA_VERSION }}

      # Babashka + clj-kondo on all OS
      - name: Setup Clojure tools (bb, clj-kondo)
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          bb: latest
          clj-kondo: latest

      # Clojure CLI per-OS
      - name: Install Clojure CLI (Linux)
        if: runner.os == 'Linux'
        run: ./.github/scripts/install-clojure-linux.sh

      - name: Install Clojure CLI (macOS)
        if: runner.os == 'macOS'
        run: ./.github/scripts/install-clojure-macos.sh

      - name: Install Clojure CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: ./.github/scripts/install-clojure-windows.ps1

      # Trivy only on Linux
      - name: Install Trivy (Linux)
        if: runner.os == 'Linux'
        run: ./.github/scripts/install-trivy-linux.sh

      # Linux: run full pipeline (includes Trivy/audit per bb task)
      - name: Run CI pipeline (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: bb ci

      # macOS: lint + tests
      - name: Lint (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: bb lint

      - name: Test (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: bb test

      # Windows: lint + tests using pwsh
      - name: Lint (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: bb lint

      - name: Test (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: bb test
