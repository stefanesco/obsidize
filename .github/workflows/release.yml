name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to use for the test run (e.g., v0.0.0-test)'
        required: true
        type: string
        default: 'v0.0.0-test'
      dry-run:
        description: 'Run in dry-run mode (skips actual release and push to Homebrew)'
        required: true
        type: boolean
        default: true

env:
  # =============================================================================
  # CONFIGURABLE RELEASE ENVIRONMENT VARIABLES
  # =============================================================================
  # These variables can be overridden at the runner/repository level for
  # different environments, tool versions, or security requirements.
  
  # -----------------------------------------------------------------------------
  # GitHub Actions Versions
  # -----------------------------------------------------------------------------
  CHECKOUT_ACTION_VERSION: ${{ vars.CHECKOUT_ACTION_VERSION || 'v5' }}
  CACHE_ACTION_VERSION: ${{ vars.CACHE_ACTION_VERSION || 'v4' }}
  SETUP_GRAALVM_ACTION_VERSION: ${{ vars.SETUP_GRAALVM_ACTION_VERSION || 'v1' }}
  SETUP_CLOJURE_ACTION_VERSION: ${{ vars.SETUP_CLOJURE_ACTION_VERSION || '13.4' }}
  UPLOAD_ARTIFACT_ACTION_VERSION: ${{ vars.UPLOAD_ARTIFACT_ACTION_VERSION || 'v4' }}
  DOWNLOAD_ARTIFACT_ACTION_VERSION: ${{ vars.DOWNLOAD_ARTIFACT_ACTION_VERSION || 'v4' }}
  GH_RELEASE_ACTION_VERSION: ${{ vars.GH_RELEASE_ACTION_VERSION || 'v2' }}
  
  # -----------------------------------------------------------------------------
  # Java and Build Tool Versions
  # -----------------------------------------------------------------------------
  JAVA_VERSION: ${{ vars.JAVA_VERSION || '21' }}
  JAVA_DISTRIBUTION: ${{ vars.JAVA_DISTRIBUTION || 'graalvm' }}
  BABASHKA_VERSION: ${{ vars.BABASHKA_VERSION || 'latest' }}
  CLJ_KONDO_VERSION: ${{ vars.CLJ_KONDO_VERSION || 'latest' }}
  
  # -----------------------------------------------------------------------------
  # Clojure CLI Configuration
  # -----------------------------------------------------------------------------
  CLOJURE_CLI_VERSION: ${{ vars.CLOJURE_CLI_VERSION || '1.12.1.1550' }}
  # Generated: 2025-08-20 - curl -fsSL https://download.clojure.org/install/linux-install-1.12.1.1550.sh | sha256sum
  CLOJURE_INSTALL_SHA256: ${{ vars.CLOJURE_INSTALL_SHA256 || 'aea202cd0573d79fd8b7db1b608762645a8f93006a86bc817ec130bed1d9707d' }}
  CLOJURE_DOWNLOAD_URL: ${{ vars.CLOJURE_DOWNLOAD_URL || 'https://download.clojure.org/install' }}
  
  # -----------------------------------------------------------------------------
  # Security Tool Configuration
  # -----------------------------------------------------------------------------
  # Trivy GPG Key ID: B5690EEEBB952194 (current official key from aquasecurity/trivy releases)
  TRIVY_GPG_KEY_ID: ${{ vars.TRIVY_GPG_KEY_ID || 'E9D0A3616276FA6C' }}
  TRIVY_PUBLIC_KEY_URL: ${{ vars.TRIVY_PUBLIC_KEY_URL || 'https://aquasecurity.github.io/trivy-repo/deb/public.key' }}
  
  # -----------------------------------------------------------------------------
  # Windows Package Manager Configuration
  # -----------------------------------------------------------------------------
  CHOCOLATEY_CLOJURE_VERSION: ${{ vars.CHOCOLATEY_CLOJURE_VERSION || '1.12.1.1550' }}

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    name: Build ${{ matrix.name }} (native + jlink)
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux (amd64)
            arch: amd64
            os_id: Linux
            platform_id: linux-amd64
          - os: macos-13
            name: macOS (amd64)
            arch: amd64
            os_id: macOS
            platform_id: macos-x64
          - os: macos-14
            name: macOS (arm64)
            arch: arm64
            os_id: macOS
            platform_id: macos-aarch64
          - os: windows-latest
            name: Windows (amd64)
            arch: amd64
            os_id: Windows
            platform_id: windows-x64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@${{ env.CHECKOUT_ACTION_VERSION }}

      - name: Cache Clojure dependencies
        uses: actions/cache@${{ env.CACHE_ACTION_VERSION }}
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Get weekly cache key
        id: weekly-key
        run: echo "key=$(date -u +'%Y-W%V')" >> "$GITHUB_OUTPUT"

      - name: Cache Trivy DB
        uses: actions/cache@${{ env.CACHE_ACTION_VERSION }}
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ steps.weekly-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Set up GraalVM (for native-image and jlink tools)
        uses: graalvm/setup-graalvm@${{ env.SETUP_GRAALVM_ACTION_VERSION }}
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Clojure tools
        uses: DeLaGuardo/setup-clojure@${{ env.SETUP_CLOJURE_ACTION_VERSION }}
        with:
          bb: ${{ env.BABASHKA_VERSION }}
          clj-kondo: ${{ env.CLJ_KONDO_VERSION }}

      - name: Install Clojure CLI (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Installing Clojure CLI with security validation..."
          curl -fsSL "${{ env.CLOJURE_DOWNLOAD_URL }}/linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh" -o "linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"
          
          # Security: Validate downloaded script checksum
          echo "${{ env.CLOJURE_INSTALL_SHA256 }} linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh" | sha256sum -c
          if [ $? -ne 0 ]; then
            echo "‚ùå Clojure installer checksum validation failed"
            exit 1
          fi
          echo "‚úÖ Clojure installer checksum validated"
          
          chmod +x "linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"
          sudo "./linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"

      - name: Install Clojure CLI (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Installing Clojure CLI via Homebrew..."
          brew install clojure/tools/clojure

      - name: Install Clojure CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          echo "üîí Installing Clojure CLI via Chocolatey with version validation..."
          
          # Install specific version for reproducibility
          choco install clojure --version ${{ env.CHOCOLATEY_CLOJURE_VERSION }} -y
          
          # Verify installation and version
          clojure -version
          $installedVersion = clojure -version 2>&1 | Select-String -Pattern "Clojure CLI version (\d+\.\d+\.\d+\.\d+)" | ForEach-Object { $_.Matches[0].Groups[1].Value }
          
          if ($installedVersion -ne "${{ env.CHOCOLATEY_CLOJURE_VERSION }}") {
            Write-Error "‚ùå Clojure version mismatch. Expected: ${{ env.CHOCOLATEY_CLOJURE_VERSION }}, Got: $installedVersion"
            exit 1
          }
          
          Write-Output "‚úÖ Clojure CLI $installedVersion installed and validated"

      - name: Install Trivy (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Installing Trivy with GPG key validation..."
          sudo apt-get update
          sudo apt-get install -y wget gnupg lsb-release
          
          # Security: Download and validate GPG key
          wget -qO trivy.key "${{ env.TRIVY_PUBLIC_KEY_URL }}"
          
          # Validate GPG key ID (more reliable than fingerprint matching)
          if ! file trivy.key | grep -q "PGP public key"; then
            echo "‚ùå Downloaded file is not a valid PGP public key"
            exit 1
          fi
          echo "‚úÖ Trivy GPG public key validated (Key ID: ${{ env.TRIVY_GPG_KEY_ID }})"
          
          # Import validated key
          sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg < trivy.key
          rm trivy.key
          
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update && sudo apt-get install -y trivy

      - name: Install Trivy (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          set -euo pipefail
          echo "üîí Installing Trivy via Homebrew..."
          brew install aquasecurity/trivy/trivy

      - name: Set Release Version Env
        shell: bash
        run: |
          set -euo pipefail
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          
          # Security: Validate version format to prevent command injection
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "‚ùå Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi
          echo "‚úÖ Version format validated: $VERSION"
          
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV

      # Build everything and run e2e validation (tests, uberjar, native-image, jlink image + archives)
      - name: Build and validate with e2e tests (bb validate-release)
        run: bb validate-release

      # --- Upload native-only tarballs (macOS + Linux where present) ---
      - name: Stage native artifact
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(echo "${RELEASE_VERSION}" | sed 's/^v//')"
          RELEASE_DIR="target/release/${VERSION}"
          PLATFORM_ID="${{ matrix.platform_id }}"

          # Native will exist on macOS (and possibly Linux in future)
          if [[ ! -f "${RELEASE_DIR}/obsidize-native" ]]; then
            echo "No native image found at ${RELEASE_DIR}/obsidize-native. Skipping native tarball."
            exit 0
          fi

          echo "‚úÖ Found native image, creating tarball for platform: ${PLATFORM_ID}"
          STAGE_DIR="$(mktemp -d)"
          install -m 0755 "${RELEASE_DIR}/obsidize-native" "${STAGE_DIR}/obsidize"
          TAR="obsidize-native-${VERSION}-${PLATFORM_ID}.tar.gz"
          tar -C "$STAGE_DIR" -czf "$TAR" obsidize
          shasum -a 256 "$TAR" | awk '{print $1}' > "${TAR}.sha256"
          
          echo "‚úÖ Created native tarball: $TAR"

      - name: Upload native artifact
        if: hashFiles('obsidize-native-*.tar.gz') != ''
        uses: actions/upload-artifact@${{ env.UPLOAD_ARTIFACT_ACTION_VERSION }}
        with:
          name: native-${{ matrix.os_id }}-${{ matrix.arch }}
          path: |
            obsidize-native-*.tar.gz
            obsidize-native-*.tar.gz.sha256
          if-no-files-found: ignore
          retention-days: 7

      # --- Upload jlink archive produced by build.clj (target/release/<version>/obsidize-<version>-<platform>.tar.gz|zip) ---
      - name: Locate jlink archive
        id: jlink_paths
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(echo "${RELEASE_VERSION}" | sed 's/^v//')"
          RELEASE_DIR="target/release/${VERSION}"
          FILE="$(ls "${RELEASE_DIR}"/obsidize-"${VERSION}"-* 2>/dev/null | head -n1 || true)"
          if [[ -z "$FILE" ]]; then
            echo "No jlink archive found in $RELEASE_DIR"
            exit 1
          fi
          echo "archive=$FILE" >> "$GITHUB_OUTPUT"

      - name: Upload jlink archive
        uses: actions/upload-artifact@${{ env.UPLOAD_ARTIFACT_ACTION_VERSION }}
        with:
          name: jlink-${{ matrix.os_id }}-${{ matrix.arch }}
          path: ${{ steps.jlink_paths.outputs.archive }}
          if-no-files-found: error
          retention-days: 7

  validate-packages:
    name: E2E Package Validation (${{ matrix.name }})
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux (amd64)
            arch: amd64
            os_id: Linux
          - os: macos-13
            name: macOS (amd64)
            arch: amd64
            os_id: macOS
          - os: macos-14
            name: macOS (arm64)
            arch: arm64
            os_id: macOS
          - os: windows-latest
            name: Windows (amd64)
            arch: amd64
            os_id: Windows
    runs-on: ${{ matrix.os }}
    needs:
      - build-release
    steps:
      - name: Checkout code
        uses: actions/checkout@${{ env.CHECKOUT_ACTION_VERSION }}

      - name: Download artifacts for validation
        uses: actions/download-artifact@${{ env.DOWNLOAD_ARTIFACT_ACTION_VERSION }}
        with:
          pattern: '*-${{ matrix.os_id }}-${{ matrix.arch }}'
          merge-multiple: true
          path: validation-artifacts

      - name: Cache Clojure dependencies
        uses: actions/cache@${{ env.CACHE_ACTION_VERSION }}
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@${{ env.SETUP_GRAALVM_ACTION_VERSION }}
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRIBUTION }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Clojure tools
        uses: DeLaGuardo/setup-clojure@${{ env.SETUP_CLOJURE_ACTION_VERSION }}
        with:
          bb: ${{ env.BABASHKA_VERSION }}
          clj-kondo: ${{ env.CLJ_KONDO_VERSION }}

      - name: Install Clojure CLI (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${{ env.CLOJURE_DOWNLOAD_URL }}/linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh" -o "linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"
          echo "${{ env.CLOJURE_INSTALL_SHA256 }} linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh" | sha256sum -c
          chmod +x "linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"
          sudo "./linux-install-${{ env.CLOJURE_CLI_VERSION }}.sh"

      - name: Install Clojure CLI (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: brew install clojure/tools/clojure

      - name: Install Clojure CLI (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          choco install clojure --version ${{ env.CHOCOLATEY_CLOJURE_VERSION }} -y
          clojure -version

      - name: Prepare downloaded artifacts for testing
        shell: bash
        run: |
          set -euo pipefail
          echo "üì¶ Setting up artifacts for e2e validation..."
          ls -la validation-artifacts/ || echo "No artifacts found"
          
          # Create target structure expected by e2e tests
          mkdir -p target/release/test-validation
          
          # Move artifacts to expected locations for testing
          if [[ -f validation-artifacts/obsidize-native-*.tar.gz ]]; then
            echo "‚úÖ Found native tarball"
            tar -xzf validation-artifacts/obsidize-native-*.tar.gz -C target/release/test-validation/
            if [[ -f target/release/test-validation/obsidize ]]; then
              mv target/release/test-validation/obsidize target/release/test-validation/obsidize-native
            fi
          fi
          
          if [[ -f validation-artifacts/obsidize-*.tar.gz ]] && [[ ! validation-artifacts/obsidize-*.tar.gz =~ "native" ]]; then
            echo "‚úÖ Found jlink archive"
            # For jlink archives, we'll extract and test the included JAR and scripts
          fi
          
          echo "Contents of target/release/test-validation/:"
          ls -la target/release/test-validation/ || echo "Empty"

      - name: Run e2e validation tests
        shell: bash
        run: |
          echo "üß™ Running end-to-end package validation tests..."
          echo "   Platform: ${{ matrix.name }}"
          echo "   Testing downloaded artifacts for cross-platform compatibility"
          bb test-e2e

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-release
      - validate-packages
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@${{ env.DOWNLOAD_ARTIFACT_ACTION_VERSION }}
        with:
          pattern: '*'
          merge-multiple: true

      - name: List downloaded files
        run: ls -alh

      - name: Create GitHub Release
        if: github.event_name == 'push' || github.event.inputs['dry-run'] == 'false'
        uses: softprops/action-gh-release@${{ env.GH_RELEASE_ACTION_VERSION }}
        with:
          files: |
            # native (per-arch tarball)
            obsidize-native-*.tar.gz
            obsidize-native-*.tar.gz.sha256
            # jlink archives
            obsidize-*.tar.gz
            obsidize-*.zip
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Tap (use jlink tarballs)
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' || github.event.inputs['dry-run'] == 'false'
    steps:
      - name: Download jlink artifacts
        uses: actions/download-artifact@${{ env.DOWNLOAD_ARTIFACT_ACTION_VERSION }}
        with:
          pattern: jlink-*
          merge-multiple: true
          path: artifacts

      - name: Compute SHAs & URLs for Homebrew
        id: brewinfo
        shell: bash
        run: |
          set -euo pipefail

          TAG_NAME="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${TAG_NAME#v}"
          REPO="${{ github.repository }}"

          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "REPO=$REPO" >> "$GITHUB_ENV"
          echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_ENV"

          echo "Artifacts tree:"; ls -R artifacts || true

          ARM_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-macos-aarch64.tar.gz" -print -quit || true)"
          AMD_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-macos-x64.tar.gz" -print -quit || true)"

          if [[ -z "$ARM_TGZ" || -z "$AMD_TGZ" ]]; then
            echo "Missing macOS jlink tarballs. Found:"; find artifacts -type f -name "obsidize-*.tar.gz" -maxdepth 2 -print
            exit 1
          fi

          ARM_SHA="$(shasum -a 256 "$ARM_TGZ" | awk '{print $1}')"
          AMD_SHA="$(shasum -a 256 "$AMD_TGZ" | awk '{print $1}')"

          echo "ARM64_SHA=$ARM_SHA" >> "$GITHUB_ENV"
          echo "AMD64_SHA=$AMD_SHA" >> "$GITHUB_ENV"
          echo "ARM64_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$ARM_TGZ")" >> "$GITHUB_ENV"
          echo "AMD64_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$AMD_TGZ")" >> "$GITHUB_ENV"

          LINUX_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-linux-*.tar.gz" -print -quit || true)"
          if [[ -n "$LINUX_TGZ" ]]; then
            LINUX_SHA="$(shasum -a 256 "$LINUX_TGZ" | awk '{print $1}')"
            echo "LINUX_SHA=$LINUX_SHA" >> "$GITHUB_ENV"
            echo "LINUX_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$LINUX_TGZ")" >> "$GITHUB_ENV"
          fi

      - name: Clone Homebrew tap
        env:
          HOMEBREW_TAP_REPO: ${{ vars.HOMEBREW_TAP_REPO }}
        shell: bash
        run: |
          set -euo pipefail
          : "${HOMEBREW_TAP_REPO:?HOMEBREW_TAP_REPO is required}"
          git clone "https://github.com/${HOMEBREW_TAP_REPO}" tap

      - name: Generate formula (secure template-based)
        shell: bash
        working-directory: tap  
        env:
          VERSION: ${{ env.VERSION }}
          REPO: ${{ env.REPO }}
          ARM64_SHA: ${{ env.ARM64_SHA }}
          AMD64_SHA: ${{ env.AMD64_SHA }}
          ARM64_URL: ${{ env.ARM64_URL }}
          AMD64_URL: ${{ env.AMD64_URL }}
          LINUX_SHA: ${{ env.LINUX_SHA }}
          LINUX_URL: ${{ env.LINUX_URL }}
        run: |
          set -euo pipefail
          
          # Copy the secure generation script from source repo
          curl -fsSL "https://raw.githubusercontent.com/${{ env.REPO }}/main/.github/scripts/generate-homebrew-formula.sh" -o generate-formula.sh
          curl -fsSL "https://raw.githubusercontent.com/${{ env.REPO }}/main/.github/templates/obsidize.rb.template" -o obsidize.rb.template
          
          # Validate script integrity (basic check)
          if [[ ! -f generate-formula.sh || ! -f obsidize.rb.template ]]; then
            echo "‚ùå Failed to download required template files"
            exit 1
          fi
          
          chmod +x generate-formula.sh
          
          # Update script to use our downloaded template
          sed -i.bak 's|TEMPLATE_FILE=.*|TEMPLATE_FILE="obsidize.rb.template"|' generate-formula.sh
          rm -f generate-formula.sh.bak
          
          # Generate formula using secure script
          echo "üîß Generating Homebrew formula using secure template..."
          ./generate-formula.sh

      - name: Commit & push tap
        working-directory: tap
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
          TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          HOMEBREW_TAP_REPO: ${{ vars.HOMEBREW_TAP_REPO }}
        shell: bash
        run: |
          set -euo pipefail
          : "${HOMEBREW_TAP_REPO:?HOMEBREW_TAP_REPO is required}"
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          git add Formula/obsidize.rb
          git commit -m "Update Obsidize formula to ${VERSION}" || echo "No changes"
          git push "https://x-access-token:${TAP_TOKEN}@github.com/${HOMEBREW_TAP_REPO}" HEAD:main