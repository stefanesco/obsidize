name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to use for the test run (e.g., v0.0.0-test)'
        required: true
        type: string
        default: 'v0.0.0-test'
      dry-run:
        description: 'Run in dry-run mode (skips actual release and push to Homebrew)'
        required: true
        type: boolean
        default: true

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-release:
    name: Build ${{ matrix.name }} (native + jlink)
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux (amd64)
            arch: amd64
            os_id: Linux
          - os: macos-13
            name: macOS (amd64)
            arch: amd64
            os_id: macOS
          - os: macos-14
            name: macOS (arm64)
            arch: arm64
            os_id: macOS
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache Clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Get weekly cache key
        id: weekly-key
        run: echo "key=$(date -u +'%Y-W%V')" >> "$GITHUB_OUTPUT"

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ steps.weekly-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Set up GraalVM (for native-image and jlink tools)
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          bb: 'latest'
          clj-kondo: 'latest'

      - name: Install Clojure CLI
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            curl -O https://download.clojure.org/install/linux-install-1.12.1.1550.sh
            chmod +x linux-install-1.12.1.1550.sh
            sudo ./linux-install-1.12.1.1550.sh
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install clojure/tools/clojure
          fi

      - name: Install Trivy
        shell: bash
        run: |
          set -euo pipefail
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y wget gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
            echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update && sudo apt-get install -y trivy
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install aquasecurity/trivy/trivy
          fi

      - name: Set Release Version Env
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV

      # Build everything (tests, uberjar, native-image, jlink image + archives)
      - name: Build (bb package)
        run: bb package

      # --- Upload native-only tarballs (binary + checksum) ---
      - name: Stage native artifact
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(echo "$RELEASE_VERSION" | sed 's/^v//')"
          RELEASE_DIR="target/release/$VERSION"
          STAGE_DIR="$(mktemp -d)"
          install -m 0755 "$RELEASE_DIR/obsidize" "$STAGE_DIR/obsidize"
          TAR="obsidize-${{ matrix.arch }}-${{ runner.os }}.tar.gz"
          tar -C "$STAGE_DIR" -czf "$TAR" obsidize
          shasum -a 256 "$TAR" | awk '{print $1}' > "SHA256-${{ matrix.arch }}-${{ runner.os }}"
      - name: Upload native artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-${{ matrix.os_id }}-${{ matrix.arch }}
          path: |
            obsidize-${{ matrix.arch }}-${{ runner.os }}.tar.gz
            SHA256-${{ matrix.arch }}-${{ runner.os }}
          if-no-files-found: error
          retention-days: 7

      # --- Upload jlink archives produced by build.clj (lives in target/release/<version>/) ---
      - name: Locate jlink archive(s)
        id: jlink_paths
        shell: bash
        run: |
          set -euo pipefail
          VERSION="$(echo "$RELEASE_VERSION" | sed 's/^v//')"
          RELEASE_DIR="target/release/$VERSION"
          echo "Searching jlink archives in $RELEASE_DIR"
          ls -l "$RELEASE_DIR" || true
          # Our build writes: obsidize-<version>-<platform-id>.tar.gz|zip
          # Each matrix build produces exactly one for its platform.
          FILE="$(ls "$RELEASE_DIR"/obsidize-"$VERSION"-* 2>/dev/null | head -n1 || true)"
          if [[ -z "$FILE" ]]; then
            echo "No jlink archive found in $RELEASE_DIR"
            exit 1
          fi
          echo "archive=$FILE" >> "$GITHUB_OUTPUT"
      - name: Upload jlink archive
        uses: actions/upload-artifact@v4
        with:
          name: jlink-${{ matrix.os_id }}-${{ matrix.arch }}
          path: ${{ steps.jlink_paths.outputs.archive }}
          if-no-files-found: error
          retention-days: 7

  # Windows jlink-only (no native-image)
  build-jlink-windows:
    name: Build Windows (jlink)
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Java (Temurin 21)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Setup Clojure tools
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          bb: 'latest'
          clj-kondo: 'latest'

      - name: Install Clojure CLI (Windows)
        shell: pwsh
        run: |
          iwr -useb get.scoop.sh | iex
          scoop install clojure
          clojure -Sdescribe

      - name: Set Release Version Env
        shell: pwsh
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $env:GITHUB_ENV

      - name: Build jlink image (bb jlink)
        shell: pwsh
        run: bb jlink

      - name: Upload Windows jlink archive
        shell: pwsh
        run: |
          $version = "${{ env.RELEASE_VERSION }}".TrimStart('v')
          $releaseDir = "target/release/$version"
          $zip = Get-ChildItem $releaseDir -Filter "obsidize-$version-windows-*.zip" | Select-Object -First 1
          if (-not $zip) { throw "No Windows jlink zip found in $releaseDir" }
          echo "archive=$($zip.FullName)" >> $env:GITHUB_OUTPUT
        id: win_jlink
      - name: Upload jlink artifact (Windows)
        uses: actions/upload-artifact@v4
        with:
          name: jlink-Windows-amd64
          path: ${{ steps.win_jlink.outputs.archive }}
          if-no-files-found: error
          retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs:
      - build-release
      - build-jlink-windows
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v5
        with:
          pattern: '*'
          merge-multiple: true

      - name: List downloaded files
        run: ls -R

      - name: Create GitHub Release
        if: github.event_name == 'push' || github.event.inputs['dry-run'] == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            # native (per-arch tarball)
            obsidize-*.tar.gz
            SHA256-*
            # jlink (from target/release/<version>/...)
            target/release/*/obsidize-*.tar.gz
            target/release/*/obsidize-*.zip
          generate_release_notes: true
          prerelease: ${{ contains(github.ref_name, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Tap (use jlink tarballs)
    runs-on: ubuntu-latest
    needs: release
    if: github.event_name == 'push' || github.event.inputs['dry-run'] == 'false'
    steps:
      - name: Download jlink artifacts
        uses: actions/download-artifact@v5
        with:
          # We only need the jlink archives for macOS (both arches). Linux bottle optional.
          pattern: jlink-*
          merge-multiple: true
          path: artifacts

      - name: Compute SHAs & URLs for Homebrew
        id: brewinfo
        shell: bash
        run: |
          set -euo pipefail

          TAG_NAME="${{ github.event.inputs.version || github.ref_name }}"
          VERSION="${TAG_NAME#v}"
          REPO="${{ github.repository }}"

          echo "TAG_NAME=$TAG_NAME" >> "$GITHUB_ENV"
          echo "VERSION=$VERSION" >> "$GITHUB_ENV"
          echo "REPO=$REPO" >> "$GITHUB_ENV"

          echo "Artifacts tree:"; ls -R artifacts || true

          # Find macOS jlink tarballs built by each mac matrix:
          ARM_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-macos-aarch64.tar.gz" -print -quit || true)"
          AMD_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-macos-x64.tar.gz" -print -quit || true)"

          if [[ -z "$ARM_TGZ" || -z "$AMD_TGZ" ]]; then
            echo "Missing macOS jlink tarballs. Found:"; find artifacts -type f -maxdepth 2 -name "obsidize-*.tar.gz" -print
            exit 1
          fi

          ARM_SHA="$(shasum -a 256 "$ARM_TGZ" | awk '{print $1}')"
          AMD_SHA="$(shasum -a 256 "$AMD_TGZ" | awk '{print $1}')"

          echo "ARM64_SHA=$ARM_SHA" >> "$GITHUB_ENV"
          echo "AMD64_SHA=$AMD_SHA" >> "$GITHUB_ENV"

          echo "ARM64_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$ARM_TGZ")" >> "$GITHUB_ENV"
          echo "AMD64_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$AMD_TGZ")" >> "$GITHUB_ENV"

          # Optional Linux (amd64) jlink tarball
          LINUX_TGZ="$(find artifacts -type f -name "obsidize-${VERSION}-linux-amd64.tar.gz" -print -quit || true)"
          if [[ -n "$LINUX_TGZ" ]]; then
            LINUX_AMD_SHA="$(shasum -a 256 "$LINUX_TGZ" | awk '{print $1}')"
            echo "LINUX_AMD_SHA=$LINUX_AMD_SHA" >> "$GITHUB_ENV"
            echo "LINUX_AMD_URL=https://github.com/$REPO/releases/download/$TAG_NAME/$(basename "$LINUX_TGZ")" >> "$GITHUB_ENV"
          fi

      - name: Clone Homebrew tap
        env:
          HOMEBREW_TAP_REPO: ${{ vars.HOMEBREW_TAP_REPO }}
        shell: bash
        run: |
          set -euo pipefail
          : "${HOMEBREW_TAP_REPO:?HOMEBREW_TAP_REPO is required}"
          git clone "https://github.com/${HOMEBREW_TAP_REPO}" tap

      - name: Generate formula (jlink archive installs)
        shell: bash
        working-directory: tap
        env:
          VERSION: ${{ env.VERSION }}
          REPO: ${{ env.REPO }}
          ARM64_SHA: ${{ env.ARM64_SHA }}
          AMD64_SHA: ${{ env.AMD64_SHA }}
          ARM64_URL: ${{ env.ARM64_URL }}
          AMD64_URL: ${{ env.AMD64_URL }}
          LINUX_AMD_SHA: ${{ env.LINUX_AMD_SHA }}
          LINUX_AMD_URL: ${{ env.LINUX_AMD_URL }}
        run: |
          set -euo pipefail
          mkdir -p Formula

          cat > Formula/obsidize.rb <<'RUBY'
          class Obsidize < Formula
            desc "Claude to Obsidian converter"
            homepage "https://github.com/REPO_PLACEHOLDER"
            license "AGPL-3.0"
            version "VERSION_PLACEHOLDER"

            on_macos do
              on_arm do
                url "ARM64_URL_PLACEHOLDER"
                sha256 "ARM64_SHA_PLACEHOLDER"
              end
              on_intel do
                url "AMD64_URL_PLACEHOLDER"
                sha256 "AMD64_SHA_PLACEHOLDER"
              end
            end

            on_linux do
              on_intel do
                url "LINUX_AMD_URL_PLACEHOLDER"
                sha256 "LINUX_AMD_SHA_PLACEHOLDER"
              end
            end

            def install
              # jlink image layout:
              #   obsidize-<platform>/
              #     bin/java
              #     bin/obsidize
              #     (macOS tarball may also include bin/obsidize-native)
              #     app/obsidize-standalone.jar
              libexec.install Dir["*"]
              bin.install_symlink libexec/"bin/obsidize"
              # optional native symlink if present
              if (libexec/"bin/obsidize-native").exist?
                bin.install_symlink libexec/"bin/obsidize-native"
              end
            end

            test do
              assert_match "obsidize", shell_output("#{bin}/obsidize --help")
            end
          end
          RUBY

          sed -i.bak \
            -e "s#REPO_PLACEHOLDER#${REPO}#g" \
            -e "s#VERSION_PLACEHOLDER#${VERSION}#g" \
            -e "s#ARM64_URL_PLACEHOLDER#${ARM64_URL}#g" \
            -e "s#AMD64_URL_PLACEHOLDER#${AMD64_URL}#g" \
            -e "s#ARM64_SHA_PLACEHOLDER#${ARM64_SHA}#g" \
            -e "s#AMD64_SHA_PLACEHOLDER#${AMD64_SHA}#g" \
            -e "s#LINUX_AMD_URL_PLACEHOLDER#${LINUX_AMD_URL:-https://example.invalid/disabled.tar.gz}#g" \
            -e "s#LINUX_AMD_SHA_PLACEHOLDER#${LINUX_AMD_SHA:-d41d8cd98f00b204e9800998ecf8427e}#g" \
            Formula/obsidize.rb
          rm -f Formula/obsidize.rb.bak

          # If we didn't publish Linux, strip the on_linux stanza for cleanliness
          if [[ -z "${LINUX_AMD_SHA:-}" ]]; then
            awk '
              /on_linux do/ {skip=1}
              skip && /end/ && ++endcnt==2 {skip=0; next}
              !skip
            ' Formula/obsidize.rb > Formula/obsidize.rb.new && mv Formula/obsidize.rb.new Formula/obsidize.rb
          fi

      - name: Commit & push tap
        working-directory: tap
        env:
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
          TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          HOMEBREW_TAP_REPO: ${{ vars.HOMEBREW_TAP_REPO }}
        shell: bash
        run: |
          set -euo pipefail
          : "${HOMEBREW_TAP_REPO:?HOMEBREW_TAP_REPO is required}"
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"
          git add Formula/obsidize.rb
          git commit -m "Update Obsidize formula to ${VERSION}" || echo "No changes"
          git push "https://x-access-token:${TAP_TOKEN}@github.com/${HOMEBREW_TAP_REPO}" HEAD:main