name: Create Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'The version to use for the test run (e.g., v0.0.0-test)'
        required: true
        type: string
        default: 'v0.0.0-test'
      dry-run:
        description: 'Run in dry-run mode (skips actual release and push to Homebrew)'
        required: true
        type: boolean
        default: true

jobs:
  build-release:
    name: Build ${{ matrix.name }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux (amd64)
            arch: amd64
          - os: macos-13
            name: macOS (amd64)
            arch: amd64
          - os: macos-14
            name: macOS (arm64)
            arch: arm64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Cache Clojure dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.gitlibs
            ~/.clojure
          key: ${{ runner.os }}-clojure-${{ hashFiles('**/deps.edn') }}
          restore-keys: |
            ${{ runner.os }}-clojure-

      - name: Get weekly cache key
        id: weekly-key
        run: echo "key=$(date -u +'%Y-W%V')" >> "$GITHUB_OUTPUT"

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-${{ steps.weekly-key.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-trivy-

      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Clojure
        uses: DeLaGuardo/setup-clojure@13.4
        with:
          bb: 'latest'
          clj-kondo: 'latest'

      - name: Install Clojure CLI
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            curl -O https://download.clojure.org/install/linux-install-1.12.1.1550.sh
            chmod +x linux-install-1.12.1.1550.sh
            sudo ./linux-install-1.12.1.1550.sh
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install clojure/tools/clojure
          fi

      - name: Install Trivy
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt-get install -y wget gnupg
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
            sudo apt-get update && sudo apt-get install -y trivy
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install aquasecurity/trivy/trivy
          fi

      - name: Set Release Version Env
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version || github.ref_name }}" >> $GITHUB_ENV

      - name: Build native executable
        run: bb package
        
      - name: Prepare Release Artifacts
        run: |
          VERSION="$(echo $RELEASE_VERSION | sed 's/v//')"
          RELEASE_DIR="target/release/$VERSION"
          mv $RELEASE_DIR/obsidize obsidize-${{ matrix.arch }}-${{ runner.os }}
          tar -czvf obsidize-${{ matrix.arch }}-${{ runner.os }}.tar.gz obsidize-${{ matrix.arch }}-${{ runner.os }}
          shasum -a 256 obsidize-${{ matrix.arch }}-${{ runner.os }}.tar.gz | awk '{print $1}' > SHA256-${{ matrix.arch }}-${{ runner.os }}

      - name: Upload Release Assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets-${{ matrix.arch }}-${{ runner.os }}
          path: |
            obsidize-*.tar.gz
            SHA256-*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v5
        with:
          pattern: release-assets-*
          merge-multiple: true

      - name: Create GitHub Release
        if: github.event_name == 'push' || github.event.inputs.dry-run == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            obsidize-*.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-homebrew:
    name: Update Homebrew Tap
    runs-on: ubuntu-latest
    needs: release
    steps:
      - name: Download all release assets
        uses: actions/download-artifact@v5
        with:
          pattern: release-assets-*
          merge-multiple: true

      - name: Set up environment for formula
        id: formula-env
        run: |
          TAG_NAME=${{ github.event.inputs.version || github.ref_name }}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "VERSION=$(echo $TAG_NAME | sed 's/v//')" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "ARM64_SHA=$(cat release-assets-arm64-macos-14/SHA256-arm64-macos-14)" >> $GITHUB_ENV
          echo "AMD64_SHA=$(cat release-assets-amd64-macos-13/SHA256-amd64-macos-13)" >> $GITHUB_ENV

      - name: Clone Homebrew tap
        run: git clone https://github.com/${{ vars.HOMEBREW_TAP_REPO }} tap

      - name: Generate formula from template
        working-directory: tap
        run: |
          cat > template.rb <<-'RUBY'
          class Obsidize < Formula
            desc "A simple Clojure CLI tool"
            homepage "https://github.com/$REPO"
            version "$VERSION"

            on_macos do
              on_arm do
                url "https://github.com/$REPO/releases/download/$TAG_NAME/obsidize-arm64-macos-14.tar.gz"
                sha256 "$ARM64_SHA"
              end
              on_intel do
                url "https://github.com/$REPO/releases/download/$TAG_NAME/obsidize-amd64-macos-13.tar.gz"
                sha256 "$AMD64_SHA"
              end
            end

            def install
              bin.install "obsidize-arm64-macos-14" => "obsidize"
            end

            test do
              output = shell_output("#{bin}/obsidize --help 2>&1", 0)
              assert_match "obsidize", output
            end
          end
          RUBY
          envsubst < template.rb > Formula/obsidize.rb

      - name: Commit & push tap
        if: github.event_name == 'push' || github.event.inputs.dry-run == 'false'
        working-directory: tap
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: actions@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions
          GIT_COMMITTER_EMAIL: actions@users.noreply.github.com
          TAP_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          git config --global user.name "${GIT_AUTHOR_NAME}"
          git config --global user.email "${GIT_AUTHOR_EMAIL}"
          git add Formula/obsidize.rb
          git commit -m "Update Obsidize formula to $TAG_NAME" || echo "No changes"
          git push https://x-access-token:${TAP_TOKEN}@github.com/${{ vars.HOMEBREW_TAP_REPO }} HEAD:main